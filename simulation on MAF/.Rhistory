############## Summary table:
new_summary <- NULL
for (k in 1:num_rep) {
new_summary_k <- matrix(nrow = 2, ncol = 1, c("Pro1", "Pro2"))
for (maf in maf_vec){
load(paste0(result_path, "summary_sim1_data_case2_givenSize", "_MAF_", maf, "_rep_", k, ".rda"))
new_summary_k <- cbind(new_summary_k, summary_data[,-1])
}
new_summary <- rbind(new_summary, new_summary_k)
}
result_path
############# Additional Simulation 2: (Prospective, continuous E) #########################
maf_vec <- c(0.05, 0.1, 0.2, 0.3, 0.4, 0.5)
maf_vec <- c(0.05, 0.1, 0.5)
for(k in 1:num_rep){
for (maf in maf_vec) {
set.seed(k)
parameters <- list(preva = 0.2, pG = maf, muE = 0, sigmaE = 1, betaG = log(1.3), betaE = log(2.5), gammaG = log(0.5))
others_para <- convert_preva_to_intercept(parameters, mode = "dominant", covariate = "continuous")
beta0 <- others_para$beta0
exp(beta0)/(1+exp(beta0))
n <- seq(from = 3000, to = 10000, by = 1000)
Power_Proposed1 <- c()
Power_Proposed2 <- c()
for (i in 1:length(n)) {
Power_Proposed1[i] <- SPCompute:::Compute_Power_Sim(parameters, n = n[i], mode = "dominant", covariate = "continuous", response = "binary")
Power_Proposed2[i] <- SPCompute:::Compute_Power_Expanded(parameters, n = n[i], mode = "dominant", covariate = "continuous", response = "binary")
}
set.seed(k)
emp_powers <- c()
for (i in 1:length(n)) {
correct <- c()
for (j in 1:1000) {
kk <- n[i]
G <- sample(c(0,1), size = kk, replace = T, prob = c((1-parameters$pG)^2, (1 - ((1-parameters$pG)^2))))
E <- others_para$gamma0 + parameters$gammaG * G + rnorm(n = kk, sd = others_para$sigmaError)
y <- others_para$beta0 + parameters$betaG*G + parameters$betaE*E + rlogis(kk)
y <- ifelse(y>0, 1, 0)
mod <- glm(y~G+E, family = binomial(link = "logit"))
correct[j] <- summary(mod)$coefficients[2,4] <= 0.05
}
emp_powers[i] <- mean(correct)
}
sim1_data_case2_givenSize <- data.frame(n = n)
sim1_data_case2_givenSize$Empirical <- emp_powers
# save(file = paste0(result_path, "sim1_data_case2_givenSize", "_MAF_", maf, "_rep_", k, ".rda"), sim1_data_case2_givenSize)
methods <- c("Pro1", "Pro2")
MAE <- c(mean(abs(emp_powers - Power_Proposed1)), mean(abs(emp_powers - Power_Proposed2)))
MaxAE <- c(max(abs(emp_powers - Power_Proposed1)), max(abs(emp_powers - Power_Proposed2)))
summary_data <- data.frame(methods = methods, MAE = MAE, MaxAE = MaxAE)
save(file = paste0(result_path, "summary_sim1_data_case2_givenSize", "_MAF_", maf, "_rep_", k, ".rda"), summary_data)
}
}
############## Summary table:
new_summary <- NULL
for (k in 1:num_rep) {
new_summary_k <- matrix(nrow = 2, ncol = 1, c("Pro1", "Pro2"))
for (maf in maf_vec){
load(paste0(result_path, "summary_sim1_data_case2_givenSize", "_MAF_", maf, "_rep_", k, ".rda"))
new_summary_k <- cbind(new_summary_k, summary_data[,-1])
}
new_summary <- rbind(new_summary, new_summary_k)
}
MAE_summary <- new_summary[,c(1,seq(2, 2*length(maf_vec), by = 2))]
MaxAE_summary <- new_summary[,c(1,seq(3, (2*length(maf_vec) + 1), by = 2))]
MAE_summary
MaxAE_summary
### Compute mean and sd:
MAE_summary_Pro1 <- MAE_summary %>% filter(new_summary_k == "Pro1")
MAE_summary_Pro1_mean <- MAE_summary_Pro1[,-1] %>% apply(2, mean)
MAE_summary_Pro1_upper <- MAE_summary_Pro1[,-1] %>% apply(2, quantile, p = 0.975)
MAE_summary_Pro1_lower <- MAE_summary_Pro1[,-1] %>% apply(2, quantile, p = 0.025)
MAE_summary_Pro2 <- MAE_summary %>% filter(new_summary_k == "Pro2")
MAE_summary_Pro2_mean <- MAE_summary_Pro2[,-1] %>% apply(2, mean)
MAE_summary_Pro2_upper <- MAE_summary_Pro2[,-1] %>% apply(2, quantile, p = 0.975)
MAE_summary_Pro2_lower <- MAE_summary_Pro2[,-1] %>% apply(2, quantile, p = 0.025)
MaxAE_summary_Pro1 <- MaxAE_summary %>% filter(new_summary_k == "Pro1")
MaxAE_summary_Pro1_mean <- MaxAE_summary_Pro1[,-1] %>% apply(2, mean)
MaxAE_summary_Pro1_upper <- MaxAE_summary_Pro1[,-1] %>% apply(2, quantile, p = 0.975)
MaxAE_summary_Pro1_lower <- MaxAE_summary_Pro1[,-1] %>% apply(2, quantile, p = 0.025)
MaxAE_summary_Pro2 <- MaxAE_summary %>% filter(new_summary_k == "Pro2")
MaxAE_summary_Pro2_mean <- MaxAE_summary_Pro2[,-1] %>% apply(2, mean)
MaxAE_summary_Pro2_upper <- MaxAE_summary_Pro2[,-1] %>% apply(2, quantile, p = 0.975)
MaxAE_summary_Pro2_lower <- MaxAE_summary_Pro2[,-1] %>% apply(2, quantile, p = 0.025)
#### Plotting:
plot(MaxAE_summary_Pro1_mean ~ maf_vec, type = 'o',
ylim = c(0,0.1), ylab = "Max AE", xlab = "MAF",
col = "red")
lines(MaxAE_summary_Pro2_mean ~ maf_vec, col = "blue", lty = "solid")
points(MaxAE_summary_Pro2_mean ~ maf_vec, col = "blue")
lines(MaxAE_summary_Pro2_upper ~ maf_vec, col = "blue", lty = "dashed")
lines(MaxAE_summary_Pro2_lower ~ maf_vec, col = "blue", lty = "dashed")
lines(MaxAE_summary_Pro1_upper ~ maf_vec, col = "red", lty = "dashed")
lines(MaxAE_summary_Pro1_lower ~ maf_vec, col = "red", lty = "dashed")
legend(0.3, 0.08, legend=c("P1:SS", "P2:RD"),
col=c("red", "blue"),
cex=1, box.lty = 0, lwd = 2
)
plot(MAE_summary_Pro1_mean ~ maf_vec, type = 'o',
ylim = c(0,0.1), ylab = "Average AE", xlab = "MAF",
col = "red")
lines(MAE_summary_Pro2_mean ~ maf_vec, col = "blue", lty = "solid")
points(MAE_summary_Pro2_mean ~ maf_vec, col = "blue")
lines(MAE_summary_Pro2_upper ~ maf_vec, col = "blue", lty = "dashed")
lines(MAE_summary_Pro2_lower ~ maf_vec, col = "blue", lty = "dashed")
lines(MAE_summary_Pro1_upper ~ maf_vec, col = "red", lty = "dashed")
lines(MAE_summary_Pro1_lower ~ maf_vec, col = "red", lty = "dashed")
legend(0.3, 0.08, legend=c("P1:SS", "P2:RD"),
col=c("red", "blue"),
cex=1, box.lty = 0, lwd = 2
)
#### Plotting boxplots:
names(MAE_summary) <- c("Method", maf_vec)
long_MAE_summary <- pivot_longer(MAE_summary, cols = `0.05`:`0.5`,
names_to = "MAF", values_to = "MAE")
long_MAE_summary %>% ggplot() +
geom_boxplot(aes(x = MAF, y = MAE, fill = Method)) +
ylim(c(0,0.1)) + ylab("Average AE") +
theme_classic(base_size = 15) +
theme(legend.position = c(0.8, 0.7))
names(MaxAE_summary) <- c("Method", maf_vec)
long_MaxAE_summary <- pivot_longer(MaxAE_summary, cols = `0.05`:`0.5`,
names_to = "MAF", values_to = "MaxAE")
long_MaxAE_summary %>% ggplot() +
geom_boxplot(aes(x = MAF, y = MaxAE, fill = Method)) +
ylim(c(0,0.1)) + ylab("Max AE") +
theme_classic(base_size = 15) +
theme(legend.position = c(0.8, 0.7))
source("functions.R")
result_path <- paste0(getwd(), "/results/")
num_rep <- 100
# ############# Additional Simulation 1: (Case-Control Study, no E) #########################
# ### Assuming the case to control ratio is 1 to 1 (corresponding to preva = 0.2)
# maf_vec <- c(0.05, 0.1, 0.2, 0.3, 0.4, 0.5)
# for(k in 1:num_rep){
#   for (maf in maf_vec) {
#     set.seed(k)
#     parameters <- list(preva = 0.5, pG = maf, betaG = log(1.5))
#     others_para <- convert_preva_to_intercept(parameters, mode = "dominant", covariate = "none")
#     beta0 <- convert_preva_to_intercept(parameters, mode = "dominant", covariate = "none", seed = 2)
#     exp(beta0)/(1+exp(beta0))
#     N <- seq(from = 300, to = 1400, by = 100)
#     n <- 2*N
#     Power_Proposed1 <- c()
#     Power_Proposed2 <- c()
#     for (i in 1:length(n)) {
#       Power_Proposed1[i] <- SPCompute:::Compute_Power_Sim(parameters, n = n[i], mode = "dominant", covariate = "none", response = "binary")
#       Power_Proposed2[i] <- SPCompute:::Compute_Power_Expanded(parameters, n = n[i], mode = "dominant", covariate = "none", response = "binary")
#     }
#     sim1_data_case0_givenSize <- data.frame(n = n)
#     sim1_data_case0_givenSize$n <- n
#     sim1_data_case0_givenSize$Proposed1 <- round(Power_Proposed1, 3)
#     sim1_data_case0_givenSize$Proposed2 <- round(Power_Proposed2, 3)
#     emp_powers <- c()
#     set.seed(k)
#     for (i in 1:length(n)) {
#       correct <- c()
#       for (j in 1:1000) {
#         B <- 10000
#         G <- sample(c(0,1), size = B, replace = T, prob = c((1-parameters$pG)^2, (1 - ((1-parameters$pG)^2))))
#         y <- beta0 + parameters$betaG*G + rlogis(B)
#         y <- ifelse(y>=0, 1, 0)
#         data <- data.frame(G, y)
#         case_data <- data %>% filter(y == 1) %>% sample_n(N[i], replace = F)
#         control_data <- data %>% filter(y == 0) %>% sample_n((n[i] - N[i]), replace = F)
#         sampled_data <- rbind(case_data, control_data)
#         mod <- glm(y~G, family = binomial(link = "logit"), data = sampled_data)
#         correct[j] <- summary(mod)$coefficients[2,4] <= 0.05
#       }
#       emp_powers[i] <- mean(correct)
#     }
#     sim1_data_case0_givenSize$Empirical_CaseControl <- emp_powers
#     # save(file = paste0("sim1_data_case0_givenSize", "_MAF_", maf, "_rep_", k, ".rda"), sim1_data_case0_givenSize)
#     methods <- c("Pro1", "Pro2")
#     MAE <- c(mean(abs(emp_powers - Power_Proposed1)), mean(abs(emp_powers - Power_Proposed2)))
#     MaxAE <- c(max(abs(emp_powers - Power_Proposed1)), max(abs(emp_powers - Power_Proposed2)))
#     summary_data <- data.frame(methods = methods, MAE = MAE, MaxAE = MaxAE)
#     save(file = paste0(result_path, "summary_sim1_data_case0_givenSize", "_MAF_", maf, "_rep_", k, ".rda"), summary_data)
#   }
# }
############# Additional Simulation 2: (Prospective, continuous E) #########################
maf_vec <- c(0.05, 0.1, 0.2, 0.3, 0.4, 0.5)
for(k in 1:num_rep){
for (maf in maf_vec) {
set.seed(k)
parameters <- list(preva = 0.2, pG = maf, muE = 0, sigmaE = 1, betaG = log(1.3), betaE = log(2.5), gammaG = log(0.5))
others_para <- convert_preva_to_intercept(parameters, mode = "dominant", covariate = "continuous")
beta0 <- others_para$beta0
exp(beta0)/(1+exp(beta0))
n <- seq(from = 3000, to = 10000, by = 1000)
Power_Proposed1 <- c()
Power_Proposed2 <- c()
for (i in 1:length(n)) {
Power_Proposed1[i] <- SPCompute:::Compute_Power_Sim(parameters, n = n[i], mode = "dominant", covariate = "continuous", response = "binary")
Power_Proposed2[i] <- SPCompute:::Compute_Power_Expanded(parameters, n = n[i], mode = "dominant", covariate = "continuous", response = "binary")
}
set.seed(k)
emp_powers <- c()
for (i in 1:length(n)) {
correct <- c()
for (j in 1:1000) {
kk <- n[i]
G <- sample(c(0,1), size = kk, replace = T, prob = c((1-parameters$pG)^2, (1 - ((1-parameters$pG)^2))))
E <- others_para$gamma0 + parameters$gammaG * G + rnorm(n = kk, sd = others_para$sigmaError)
y <- others_para$beta0 + parameters$betaG*G + parameters$betaE*E + rlogis(kk)
y <- ifelse(y>0, 1, 0)
mod <- glm(y~G+E, family = binomial(link = "logit"))
correct[j] <- summary(mod)$coefficients[2,4] <= 0.05
}
emp_powers[i] <- mean(correct)
}
sim1_data_case2_givenSize <- data.frame(n = n)
sim1_data_case2_givenSize$Empirical <- emp_powers
# save(file = paste0(result_path, "sim1_data_case2_givenSize", "_MAF_", maf, "_rep_", k, ".rda"), sim1_data_case2_givenSize)
methods <- c("Pro1", "Pro2")
MAE <- c(mean(abs(emp_powers - Power_Proposed1)), mean(abs(emp_powers - Power_Proposed2)))
MaxAE <- c(max(abs(emp_powers - Power_Proposed1)), max(abs(emp_powers - Power_Proposed2)))
summary_data <- data.frame(methods = methods, MAE = MAE, MaxAE = MaxAE)
save(file = paste0(result_path, "summary_sim1_data_case2_givenSize", "_MAF_", maf, "_rep_", k, ".rda"), summary_data)
}
}
############## Summary table:
new_summary <- NULL
for (k in 1:num_rep) {
new_summary_k <- matrix(nrow = 2, ncol = 1, c("Pro1", "Pro2"))
for (maf in maf_vec){
load(paste0(result_path, "summary_sim1_data_case2_givenSize", "_MAF_", maf, "_rep_", k, ".rda"))
new_summary_k <- cbind(new_summary_k, summary_data[,-1])
}
new_summary <- rbind(new_summary, new_summary_k)
}
MAE_summary <- new_summary[,c(1,seq(2, 2*length(maf_vec), by = 2))]
MaxAE_summary <- new_summary[,c(1,seq(3, (2*length(maf_vec) + 1), by = 2))]
### Compute mean and sd:
MAE_summary_Pro1 <- MAE_summary %>% filter(new_summary_k == "Pro1")
MAE_summary_Pro1_mean <- MAE_summary_Pro1[,-1] %>% apply(2, mean)
MAE_summary_Pro1_upper <- MAE_summary_Pro1[,-1] %>% apply(2, quantile, p = 0.975)
MAE_summary_Pro1_lower <- MAE_summary_Pro1[,-1] %>% apply(2, quantile, p = 0.025)
MAE_summary_Pro2 <- MAE_summary %>% filter(new_summary_k == "Pro2")
MAE_summary_Pro2_mean <- MAE_summary_Pro2[,-1] %>% apply(2, mean)
MAE_summary_Pro2_upper <- MAE_summary_Pro2[,-1] %>% apply(2, quantile, p = 0.975)
MAE_summary_Pro2_lower <- MAE_summary_Pro2[,-1] %>% apply(2, quantile, p = 0.025)
MaxAE_summary_Pro1 <- MaxAE_summary %>% filter(new_summary_k == "Pro1")
MaxAE_summary_Pro1_mean <- MaxAE_summary_Pro1[,-1] %>% apply(2, mean)
MaxAE_summary_Pro1_upper <- MaxAE_summary_Pro1[,-1] %>% apply(2, quantile, p = 0.975)
MaxAE_summary_Pro1_lower <- MaxAE_summary_Pro1[,-1] %>% apply(2, quantile, p = 0.025)
MaxAE_summary_Pro2 <- MaxAE_summary %>% filter(new_summary_k == "Pro2")
MaxAE_summary_Pro2_mean <- MaxAE_summary_Pro2[,-1] %>% apply(2, mean)
MaxAE_summary_Pro2_upper <- MaxAE_summary_Pro2[,-1] %>% apply(2, quantile, p = 0.975)
MaxAE_summary_Pro2_lower <- MaxAE_summary_Pro2[,-1] %>% apply(2, quantile, p = 0.025)
#### Plotting:
plot(MaxAE_summary_Pro1_mean ~ maf_vec, type = 'o',
ylim = c(0,0.1), ylab = "Max AE", xlab = "MAF",
col = "red")
lines(MaxAE_summary_Pro2_mean ~ maf_vec, col = "blue", lty = "solid")
points(MaxAE_summary_Pro2_mean ~ maf_vec, col = "blue")
lines(MaxAE_summary_Pro2_upper ~ maf_vec, col = "blue", lty = "dashed")
lines(MaxAE_summary_Pro2_lower ~ maf_vec, col = "blue", lty = "dashed")
lines(MaxAE_summary_Pro1_upper ~ maf_vec, col = "red", lty = "dashed")
lines(MaxAE_summary_Pro1_lower ~ maf_vec, col = "red", lty = "dashed")
legend(0.3, 0.08, legend=c("P1:SS", "P2:RD"),
col=c("red", "blue"),
cex=1, box.lty = 0, lwd = 2
)
plot(MAE_summary_Pro1_mean ~ maf_vec, type = 'o',
ylim = c(0,0.1), ylab = "Average AE", xlab = "MAF",
col = "red")
lines(MAE_summary_Pro2_mean ~ maf_vec, col = "blue", lty = "solid")
points(MAE_summary_Pro2_mean ~ maf_vec, col = "blue")
lines(MAE_summary_Pro2_upper ~ maf_vec, col = "blue", lty = "dashed")
lines(MAE_summary_Pro2_lower ~ maf_vec, col = "blue", lty = "dashed")
lines(MAE_summary_Pro1_upper ~ maf_vec, col = "red", lty = "dashed")
lines(MAE_summary_Pro1_lower ~ maf_vec, col = "red", lty = "dashed")
legend(0.3, 0.08, legend=c("P1:SS", "P2:RD"),
col=c("red", "blue"),
cex=1, box.lty = 0, lwd = 2
)
#### Plotting boxplots:
names(MAE_summary) <- c("Method", maf_vec)
long_MAE_summary <- pivot_longer(MAE_summary, cols = `0.05`:`0.5`,
names_to = "MAF", values_to = "MAE")
long_MAE_summary %>% ggplot() +
geom_boxplot(aes(x = MAF, y = MAE, fill = Method)) +
ylim(c(0,0.1)) + ylab("Average AE") +
theme_classic(base_size = 15) +
theme(legend.position = c(0.8, 0.7))
names(MaxAE_summary) <- c("Method", maf_vec)
long_MaxAE_summary <- pivot_longer(MaxAE_summary, cols = `0.05`:`0.5`,
names_to = "MAF", values_to = "MaxAE")
long_MaxAE_summary %>% ggplot() +
geom_boxplot(aes(x = MAF, y = MaxAE, fill = Method)) +
ylim(c(0,0.1)) + ylab("Max AE") +
theme_classic(base_size = 15) +
theme(legend.position = c(0.8, 0.7))
source("functions.R")
result_path <- paste0(getwd(), "/results/")
num_rep <- 100
# ############# Additional Simulation 1: (Case-Control Study, no E) #########################
# ### Assuming the case to control ratio is 1 to 1 (corresponding to preva = 0.2)
# maf_vec <- c(0.05, 0.1, 0.2, 0.3, 0.4, 0.5)
# for(k in 1:num_rep){
#   for (maf in maf_vec) {
#     set.seed(k)
#     parameters <- list(preva = 0.5, pG = maf, betaG = log(1.5))
#     others_para <- convert_preva_to_intercept(parameters, mode = "dominant", covariate = "none")
#     beta0 <- convert_preva_to_intercept(parameters, mode = "dominant", covariate = "none", seed = 2)
#     exp(beta0)/(1+exp(beta0))
#     N <- seq(from = 300, to = 1400, by = 100)
#     n <- 2*N
#     Power_Proposed1 <- c()
#     Power_Proposed2 <- c()
#     for (i in 1:length(n)) {
#       Power_Proposed1[i] <- SPCompute:::Compute_Power_Sim(parameters, n = n[i], mode = "dominant", covariate = "none", response = "binary")
#       Power_Proposed2[i] <- SPCompute:::Compute_Power_Expanded(parameters, n = n[i], mode = "dominant", covariate = "none", response = "binary")
#     }
#     sim1_data_case0_givenSize <- data.frame(n = n)
#     sim1_data_case0_givenSize$n <- n
#     sim1_data_case0_givenSize$Proposed1 <- round(Power_Proposed1, 3)
#     sim1_data_case0_givenSize$Proposed2 <- round(Power_Proposed2, 3)
#     emp_powers <- c()
#     set.seed(k)
#     for (i in 1:length(n)) {
#       correct <- c()
#       for (j in 1:1000) {
#         B <- 10000
#         G <- sample(c(0,1), size = B, replace = T, prob = c((1-parameters$pG)^2, (1 - ((1-parameters$pG)^2))))
#         y <- beta0 + parameters$betaG*G + rlogis(B)
#         y <- ifelse(y>=0, 1, 0)
#         data <- data.frame(G, y)
#         case_data <- data %>% filter(y == 1) %>% sample_n(N[i], replace = F)
#         control_data <- data %>% filter(y == 0) %>% sample_n((n[i] - N[i]), replace = F)
#         sampled_data <- rbind(case_data, control_data)
#         mod <- glm(y~G, family = binomial(link = "logit"), data = sampled_data)
#         correct[j] <- summary(mod)$coefficients[2,4] <= 0.05
#       }
#       emp_powers[i] <- mean(correct)
#     }
#     sim1_data_case0_givenSize$Empirical_CaseControl <- emp_powers
#     # save(file = paste0("sim1_data_case0_givenSize", "_MAF_", maf, "_rep_", k, ".rda"), sim1_data_case0_givenSize)
#     methods <- c("Pro1", "Pro2")
#     MAE <- c(mean(abs(emp_powers - Power_Proposed1)), mean(abs(emp_powers - Power_Proposed2)))
#     MaxAE <- c(max(abs(emp_powers - Power_Proposed1)), max(abs(emp_powers - Power_Proposed2)))
#     summary_data <- data.frame(methods = methods, MAE = MAE, MaxAE = MaxAE)
#     save(file = paste0(result_path, "summary_sim1_data_case0_givenSize", "_MAF_", maf, "_rep_", k, ".rda"), summary_data)
#   }
# }
############# Additional Simulation 2: (Prospective, continuous E) #########################
maf_vec <- c(0.05, 0.1, 0.2, 0.3, 0.4, 0.5)
new_summary <- NULL
for (k in 1:num_rep) {
new_summary_k <- matrix(nrow = 2, ncol = 1, c("Pro1", "Pro2"))
for (maf in maf_vec){
load(paste0(result_path, "summary_sim1_data_case2_givenSize", "_MAF_", maf, "_rep_", k, ".rda"))
new_summary_k <- cbind(new_summary_k, summary_data[,-1])
}
new_summary <- rbind(new_summary, new_summary_k)
}
MAE_summary <- new_summary[,c(1,seq(2, 2*length(maf_vec), by = 2))]
MaxAE_summary <- new_summary[,c(1,seq(3, (2*length(maf_vec) + 1), by = 2))]
### Compute mean and sd:
MAE_summary_Pro1 <- MAE_summary %>% filter(new_summary_k == "Pro1")
MAE_summary_Pro1_mean <- MAE_summary_Pro1[,-1] %>% apply(2, mean)
MAE_summary_Pro1_upper <- MAE_summary_Pro1[,-1] %>% apply(2, quantile, p = 0.975)
MAE_summary_Pro1_lower <- MAE_summary_Pro1[,-1] %>% apply(2, quantile, p = 0.025)
MAE_summary_Pro2 <- MAE_summary %>% filter(new_summary_k == "Pro2")
MAE_summary_Pro2_mean <- MAE_summary_Pro2[,-1] %>% apply(2, mean)
MAE_summary_Pro2_upper <- MAE_summary_Pro2[,-1] %>% apply(2, quantile, p = 0.975)
MAE_summary_Pro2_lower <- MAE_summary_Pro2[,-1] %>% apply(2, quantile, p = 0.025)
MaxAE_summary_Pro1 <- MaxAE_summary %>% filter(new_summary_k == "Pro1")
MaxAE_summary_Pro1_mean <- MaxAE_summary_Pro1[,-1] %>% apply(2, mean)
MaxAE_summary_Pro1_upper <- MaxAE_summary_Pro1[,-1] %>% apply(2, quantile, p = 0.975)
MaxAE_summary_Pro1_lower <- MaxAE_summary_Pro1[,-1] %>% apply(2, quantile, p = 0.025)
MaxAE_summary_Pro2 <- MaxAE_summary %>% filter(new_summary_k == "Pro2")
MaxAE_summary_Pro2_mean <- MaxAE_summary_Pro2[,-1] %>% apply(2, mean)
MaxAE_summary_Pro2_upper <- MaxAE_summary_Pro2[,-1] %>% apply(2, quantile, p = 0.975)
MaxAE_summary_Pro2_lower <- MaxAE_summary_Pro2[,-1] %>% apply(2, quantile, p = 0.025)
#### Plotting:
plot(MaxAE_summary_Pro1_mean ~ maf_vec, type = 'o',
ylim = c(0,0.1), ylab = "Max AE", xlab = "MAF",
col = "red")
lines(MaxAE_summary_Pro2_mean ~ maf_vec, col = "blue", lty = "solid")
points(MaxAE_summary_Pro2_mean ~ maf_vec, col = "blue")
lines(MaxAE_summary_Pro2_upper ~ maf_vec, col = "blue", lty = "dashed")
lines(MaxAE_summary_Pro2_lower ~ maf_vec, col = "blue", lty = "dashed")
lines(MaxAE_summary_Pro1_upper ~ maf_vec, col = "red", lty = "dashed")
lines(MaxAE_summary_Pro1_lower ~ maf_vec, col = "red", lty = "dashed")
legend(0.3, 0.08, legend=c("P1:SS", "P2:RD"),
col=c("red", "blue"),
cex=1, box.lty = 0, lwd = 2
)
plot(MAE_summary_Pro1_mean ~ maf_vec, type = 'o',
ylim = c(0,0.1), ylab = "Average AE", xlab = "MAF",
col = "red")
lines(MAE_summary_Pro2_mean ~ maf_vec, col = "blue", lty = "solid")
points(MAE_summary_Pro2_mean ~ maf_vec, col = "blue")
lines(MAE_summary_Pro2_upper ~ maf_vec, col = "blue", lty = "dashed")
lines(MAE_summary_Pro2_lower ~ maf_vec, col = "blue", lty = "dashed")
lines(MAE_summary_Pro1_upper ~ maf_vec, col = "red", lty = "dashed")
lines(MAE_summary_Pro1_lower ~ maf_vec, col = "red", lty = "dashed")
legend(0.3, 0.08, legend=c("P1:SS", "P2:RD"),
col=c("red", "blue"),
cex=1, box.lty = 0, lwd = 2
)
#### Plotting boxplots:
names(MAE_summary) <- c("Method", maf_vec)
long_MAE_summary <- pivot_longer(MAE_summary, cols = `0.05`:`0.5`,
names_to = "MAF", values_to = "MAE")
long_MAE_summary %>% ggplot() +
geom_boxplot(aes(x = MAF, y = MAE, fill = Method)) +
ylim(c(0,0.1)) + ylab("Average AE") +
theme_classic(base_size = 15) +
theme(legend.position = c(0.8, 0.7))
?theme_classic
?theme
long_MaxAE_summary %>% ggplot() +
geom_boxplot(aes(x = MAF, y = MaxAE, fill = Method)) +
ylim(c(0,0.1)) + ylab("Max AE") +
theme_classic(base_size = 15) +
theme(legend.position = c(0.8, 0.7),
legend.key.size = unit(1, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size=14), #change legend title font size
legend.text = element_text(size=10)) #change legend text font size)
names(MaxAE_summary) <- c("Method", maf_vec)
long_MaxAE_summary <- pivot_longer(MaxAE_summary, cols = `0.05`:`0.5`,
names_to = "MAF", values_to = "MaxAE")
long_MaxAE_summary %>% ggplot() +
geom_boxplot(aes(x = MAF, y = MaxAE, fill = Method)) +
ylim(c(0,0.1)) + ylab("Max AE") +
theme_classic(base_size = 15) +
theme(legend.position = c(0.8, 0.7),
legend.key.size = unit(1, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size=14), #change legend title font size
legend.text = element_text(size=10)) #change legend text font size)
long_MaxAE_summary %>% ggplot() +
geom_boxplot(aes(x = MAF, y = MaxAE, fill = Method)) +
ylim(c(0,0.1)) + ylab("Max AE") +
theme_classic(base_size = 15) +
theme(legend.position = c(0.7, 0.7),
legend.key.size = unit(1, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size=14), #change legend title font size
legend.text = element_text(size=10)) #change legend text font size)
names(MAE_summary) <- c("Method", maf_vec)
long_MAE_summary <- pivot_longer(MAE_summary, cols = `0.05`:`0.5`,
names_to = "MAF", values_to = "MAE")
long_MAE_summary %>% ggplot() +
geom_boxplot(aes(x = MAF, y = MAE, fill = Method)) +
ylim(c(0,0.1)) + ylab("Average AE") +
theme_classic(base_size = 15) +
theme(legend.position = c(0.7, 0.7),
legend.key.size = unit(1, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size=14), #change legend title font size
legend.text = element_text(size=10)) #change legend text font size)
#### Plotting boxplots:
names(MAE_summary) <- c("Method", maf_vec)
long_MAE_summary <- pivot_longer(MAE_summary, cols = `0.05`:`0.5`,
names_to = "MAF", values_to = "MAE")
long_MAE_summary %>% ggplot() +
geom_boxplot(aes(x = MAF, y = MAE, fill = Method)) +
ylim(c(0,0.1)) + ylab("Average AE") +
theme_classic(base_size = 15) +
theme(legend.position = c(0.7, 0.7),
legend.key.size = unit(1, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size=14), #change legend title font size
legend.text = element_text(size=10)) #change legend text font size)
names(MaxAE_summary) <- c("Method", maf_vec)
long_MaxAE_summary <- pivot_longer(MaxAE_summary, cols = `0.05`:`0.5`,
names_to = "MAF", values_to = "MaxAE")
long_MaxAE_summary %>% ggplot() +
geom_boxplot(aes(x = MAF, y = MaxAE, fill = Method)) +
ylim(c(0,0.1)) + ylab("Max AE") +
theme_classic(base_size = 15) +
theme(legend.position = c(0.7, 0.7),
legend.key.size = unit(1, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size=14), #change legend title font size
legend.text = element_text(size=10)) #change legend text font size)
long_MAE_summary %>% ggplot() +
geom_boxplot(aes(x = MAF, y = MAE, fill = Method)) +
ylim(c(0,0.1)) + ylab("Average AE") +
theme_classic(base_size = 15) +
theme(legend.position = c(0.7, 0.7),
legend.key.size = unit(1, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size=14), #change legend title font size
legend.text = element_text(size=10)) #change legend text font size)
ggsave(filename = "MAE_boxplot.pdf", height = 5, width = 5)
names(MaxAE_summary) <- c("Method", maf_vec)
long_MaxAE_summary <- pivot_longer(MaxAE_summary, cols = `0.05`:`0.5`,
names_to = "MAF", values_to = "MaxAE")
long_MaxAE_summary %>% ggplot() +
geom_boxplot(aes(x = MAF, y = MaxAE, fill = Method)) +
ylim(c(0,0.1)) + ylab("Max AE") +
theme_classic(base_size = 15) +
theme(legend.position = c(0.7, 0.7),
legend.key.size = unit(1, 'cm'), #change legend key size
legend.key.height = unit(1, 'cm'), #change legend key height
legend.key.width = unit(1, 'cm'), #change legend key width
legend.title = element_text(size=14), #change legend title font size
legend.text = element_text(size=10)) #change legend text font size)
ggsave(filename = "MaxAE_boxplot.pdf", height = 5, width = 5)
